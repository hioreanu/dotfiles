#!/usr/bin/perl
# $Id$

use strict;
BEGIN { $^W = 1 }

use Getopt::Std ();

sub usage_exit($)
{
	my ($code) = @_;
	print <<EOT;
usage: $0 [-c minclasses] [-C maxclasses] [-m minlength] [-M maxlength]
       $0 <password-text>
Spits out a random password between MINLENGTH and MAXLENGTH characters long.
Default MINLENGTH is 6, default MAXLENGTH is 8, default CLASSES is 4.
If text is specified, print text in NATO standard phonetic alphabet.
EOT
	exit($code);
}

srand(time() ^ ($$ + ($$ << 15)));

my %alpha_hash = (
	'a' => 'alpha',
	'b' => 'bravo',
	'c' => 'charlie',
	'd' => 'delta',
	'e' => 'echo',
	'f' => 'foxtrot',
	'g' => 'golf',
	'h' => 'hotel',
	'i' => 'india',
	'j' => 'juliet',
	'k' => 'kilo',
	'l' => 'lima',
	'm' => 'mike',
	'n' => 'november',
	'o' => 'oscar',
	'p' => 'papa',
	'q' => 'quebec',
	'r' => 'romeo',
	's' => 'sierra',
	't' => 'tango',
	'u' => 'uniform',
	'v' => 'victor',
	'w' => 'whiskey',
	'x' => 'xray',
	'y' => 'yankee',
	'z' => 'zulu',
	'A' => 'ALPHA',
	'B' => 'BRAVO',
	'C' => 'CHARLIE',
	'D' => 'DELTA',
	'E' => 'ECHO',
	'F' => 'FOXTROT',
	'G' => 'GOLF',
	'H' => 'HOTEL',
	'I' => 'INDIA',
	'J' => 'JULIET',
	'K' => 'KILO',
	'L' => 'LIMA',
	'M' => 'MIKE',
	'N' => 'NOVEMBER',
	'O' => 'OSCAR',
	'P' => 'PAPA',
	'Q' => 'QUEBEC',
	'R' => 'ROMEO',
	'S' => 'SIERRA',
	'T' => 'TANGO',
	'U' => 'UNIFORM',
	'V' => 'VICTOR',
	'W' => 'WHISKEY',
	'X' => 'XRAY',
	'Y' => 'YANKEE',
	'Z' => 'ZULU',
	'1' => 'one',
	'2' => 'two',
	'3' => 'three',
	'4' => 'four',
	'5' => 'five',
	'6' => 'six',
	'7' => 'seven',
	'8' => 'eight',
	'9' => 'nine',
	'0' => 'zero',
	'!' => 'exclamationpoint',
	'@' => 'at',
	'#' => 'hash',
	'$' => 'dollar',
	'%' => 'percent',
	'^' => 'caret',
	'&' => 'ampersand',
	'*' => 'star',
	'(' => 'leftparenthesis',
	')' => 'rightparenthesis',
	'-' => 'dash',
	'_' => 'underscore',
	'+' => 'plus',
	'=' => 'equals',
	'|' => 'pipe',
	'\\' => 'backslash',
	'~' => 'tilde',
	'`' => 'backtick',
	'[' => 'leftbracket',
	']' => 'rightbracket',
	'{' => 'leftbrace',
	'}' => 'rightbrace',
	';' => 'semicolon',
	':' => 'colon',
	'"' => 'doublequote',
	"'" => 'singlequote',
	',' => 'comma',
	'<' => 'lessthan',
	'.' => 'dot',
	'>' => 'greaterthan',
	'?' => 'questionmark',
	'/' => 'slash',
	' ' => 'space',
);

my $minchars = 8;
my $maxchars = 8;
my $minclasses = 3;
my $maxclasses = 3;

my %opts;
Getopt::Std::getopts('hm:M:c:C:', \%opts) or usage_exit(1);

usage_exit(0) if ($opts{h});

$minchars = $opts{m} if ($opts{m});
$maxchars = $opts{M} if ($opts{M});
$maxclasses  = $opts{c} if ($opts{c});
$minclasses  = $opts{C} if ($opts{C});
if ($minchars > $maxchars) { $maxchars = $minchars; }
if ($minclasses > $maxclasses) { $maxclasses = $minclasses; }

if ($#ARGV > -1) {
	foreach my $arg (@ARGV) {
		print $arg, "\n";
		my @chars = split //, $arg;
		print $alpha_hash{$_} . ' ' foreach @chars;
		print "\n";
	}
	exit(0);
}

local *RANDOM;
my $have_devrandom = 1;
open RANDOM, "/dev/random" or $have_devrandom = 0;

my $chars = int($minchars + (rand ($maxchars - $minchars)));
my $output = '';
while (length($output) < $chars) {
	my $c;
	if ($have_devrandom) {
		read RANDOM, $c, 1 or die("read /dev/random: $!");
		$c = chr(0x7F & (ord($c) + 32));
	} else {
		$c = chr(rand 128);
	}
	next if (ord($c) <= 32 or ord($c) == 127);
	next if ($c eq "1" or $c eq "I" or $c eq "l" or $c eq "|" or $c eq "0" or $c eq "O" or $c eq "o" or $c eq "\\" or $c eq '`');
	# print ord($c), " $c", "\n";
	if ($maxclasses == 1) {
		next if ($c !~ /[A-Z]/);
	} elsif ($maxclasses == 2) {
		next if ($c !~ /[A-Za-z]/);
	} elsif ($maxclasses == 3) {
		next if ($c !~ /[A-Za-z0-9]/);
	}
	$output .= $c;
	if (length($output) == $chars) {
		my $classes = 0;
		$classes++ if ($output =~ /[A-Z]/);
		$classes++ if ($output =~ /[a-z]/);
		$classes++ if ($output =~ /[0-9]/);
		$classes++ if ($output =~ /[^A-Za-z0-9]/);
		$output = '' if ($classes < $minclasses);
	}
}

print foreach split //, $output;
print "\n";
print $alpha_hash{$_} . ' ' foreach split //, $output;
print "\n";
